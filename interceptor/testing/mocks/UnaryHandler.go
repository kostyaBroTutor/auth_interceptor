// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UnaryHandler is an autogenerated mock type for the UnaryHandler type
type UnaryHandler struct {
	mock.Mock
}

type UnaryHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *UnaryHandler) EXPECT() *UnaryHandler_Expecter {
	return &UnaryHandler_Expecter{mock: &_m.Mock}
}

// GrpcUnaryHandler provides a mock function with given fields: ctx, req
func (_m *UnaryHandler) GrpcUnaryHandler(ctx context.Context, req interface{}) (interface{}, error) {
	ret := _m.Called(ctx, req)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnaryHandler_GrpcUnaryHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrpcUnaryHandler'
type UnaryHandler_GrpcUnaryHandler_Call struct {
	*mock.Call
}

// GrpcUnaryHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - req interface{}
func (_e *UnaryHandler_Expecter) GrpcUnaryHandler(ctx interface{}, req interface{}) *UnaryHandler_GrpcUnaryHandler_Call {
	return &UnaryHandler_GrpcUnaryHandler_Call{Call: _e.mock.On("GrpcUnaryHandler", ctx, req)}
}

func (_c *UnaryHandler_GrpcUnaryHandler_Call) Run(run func(ctx context.Context, req interface{})) *UnaryHandler_GrpcUnaryHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *UnaryHandler_GrpcUnaryHandler_Call) Return(_a0 interface{}, _a1 error) *UnaryHandler_GrpcUnaryHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UnaryHandler_GrpcUnaryHandler_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *UnaryHandler_GrpcUnaryHandler_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUnaryHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewUnaryHandler creates a new instance of UnaryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUnaryHandler(t mockConstructorTestingTNewUnaryHandler) *UnaryHandler {
	mock := &UnaryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
